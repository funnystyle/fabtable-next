name: Build and Deploy Spring Boot Application

on:
  push:
    branches:
      - master
      - publish
      - mes
      - test

env:
  # MUST CHANGE THESE VALUES WITH YOUR OWN
  SERVICE_NAME: fabtable-next
  DEPLOY_PATH: /var/services/homes/fnfworks/docker-app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"

      - name: Cache Node modules and Next.js cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}

      # Install dependencies
      - name: Install dependencies
        run: npm ci
        shell: bash

      # ‚¨áÔ∏è Î∏åÎûúÏπòÏóê ÎßûÎäî .env ÌååÏùºÏùÑ .env.production ÏúºÎ°ú Î≥µÏÇ¨
      - name: Copy deploy/${{ github.ref_name }}.conf to .env.production
        run: |
          ENV_FILE="./deploy/${{ github.ref_name }}.conf"
          if [ -f "$ENV_FILE" ]; then
            echo "üìÑ Using $ENV_FILE for .env.production"
            cp "$ENV_FILE" .env.production
          else
            echo "‚ùå $ENV_FILE not found!"
            exit 1
          fi
        shell: bash

      # Build
      - name: Build Next.js app
        run: npm run build
        shell: bash

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        # run: docker build -t ${{ env.SERVICE_NAME }}-${{ github.ref_name }}-docker:latest .
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ env.SERVICE_NAME }}-${{ github.ref_name }}-docker:latest
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Save Docker image to file
        run: docker save ${{ env.SERVICE_NAME }}-${{ github.ref_name }}-docker:latest -o ${{ env.SERVICE_NAME }}-${{ github.ref_name }}-docker.tar

      - name: Fix permissions for Docker image file
        run: chmod 777 ${{ env.SERVICE_NAME }}-${{ github.ref_name }}-docker.tar

      - name: Ensure deployment directory exists on Synology NAS
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SYNOLOGY_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            mkdir -p ${{ env.DEPLOY_PATH }}/${{ env.SERVICE_NAME }}-${{ github.ref_name }}-docker/deploy

      - name: Copy Docker image to Synology NAS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SYNOLOGY_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          source: ${{ env.SERVICE_NAME }}-${{ github.ref_name }}-docker.tar
          target: ${{ env.DEPLOY_PATH }}/${{ env.SERVICE_NAME }}-${{ github.ref_name }}-docker/deploy

      - name: Copy Script Files to Synology NAS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SYNOLOGY_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          source: ./deploy/*
          target: ${{ env.DEPLOY_PATH }}/${{ env.SERVICE_NAME }}-${{ github.ref_name }}-docker

      - name: SSH into Synology NAS and run Deploy Script
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SYNOLOGY_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            echo "${{ secrets.SSH_PASSWORD }}" | sudo -S chmod +x ${{ env.DEPLOY_PATH }}/${{ env.SERVICE_NAME }}-${{ github.ref_name }}-docker/deploy/common/script.sh
            echo "${{ secrets.SSH_PASSWORD }}" | sudo -S ${{ env.DEPLOY_PATH }}/${{ env.SERVICE_NAME }}-${{ github.ref_name }}-docker/deploy/common/script.sh ${{ env.SERVICE_NAME }} ${{ github.ref_name }}

      # - name: Notify Slack
      #   if: always() # Ìï≠ÏÉÅ Ïã§ÌñâÎêòÏßÄÎßå, Ïã§Ìå®/ÏÑ±Í≥µ ÏÉÅÌÉúÎ•º Íµ¨Î∂ÑÌïòÏó¨ Î©îÏãúÏßÄ Ï†ÑÏÜ°
      #   id: slack-notify
      #   uses: slackapi/slack-github-action@v1.26.0
      #   with:
      #     channel-id: "C077B4DB7BL"
      #     payload: |
      #       {
      #         "attachments": [
      #           {
      #             "title": "${{ github.repository }}",
      #             "title_link": "https://github.com/${{ github.repository }}",
      #             "text": "Fabtable-next.js ${{ github.ref_name }} Î∞∞Ìè¨ ${{ job.status == 'success' && 'ÏÑ±Í≥µ' || 'Ïã§Ìå®' }}",
      #             "color": "${{ job.status == 'success' && '#D6ED17' || '#FF0000' }}",
      #             "fields": [
      #               {
      #                 "title": "Repository",
      #                 "value": "${{ github.repository }}",
      #                 "short": true
      #               },
      #               {
      #                 "title": "Author",
      #                 "value": "${{ github.actor }}",
      #                 "short": true
      #               },
      #               {
      #                 "title": "Message",
      #                 "value": ${{ toJSON(github.event.head_commit.message) }},
      #                 "short": false
      #               }
      #             ]      
      #           }
      #         ]
      #       }
      #   env:
      #     SLACK_WEBHOOK_URL: "https://hooks.slack.com/services/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"
      #     SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

